void output_string() {
    GlassValue *val = stack_pop();
    fwrite(val->str->buf, sizeof(char), val->str->len, stdout);
    free_value(val);
}

void output_num() {
    GlassValue *val = stack_pop();
    printf("%g", val->num);
    free_value(val);
}

void add_numbers() {
    GlassValue *val1 = stack_pop();
    GlassValue *val2 = stack_pop();
    val1->num += val2->num;
    stack_push(val1);
    free_value(val2);
}

void subtract_numbers() {
    GlassValue *val1 = stack_pop();
    GlassValue *val2 = stack_pop();
    val1->num = val2->num - val1->num;
    stack_push(val1);
    free_value(val2);
}

void numbers_equal() {
    GlassValue *val1 = stack_pop();
    GlassValue *val2 = stack_pop();
    val1->num = (val1->num == val2->num ? 1.0 : 0.0);
    stack_push(val1);
    free_value(val2);
}

void numbers_not_equal() {
    GlassValue *val1 = stack_pop();
    GlassValue *val2 = stack_pop();
    val1->num = (val1->num != val2->num ? 1.0 : 0.0);
    stack_push(val1);
    free_value(val2);
}

void numbers_greater_than() {
    GlassValue *val1 = stack_pop();
    GlassValue *val2 = stack_pop();
    val1->num = (val1->num < val2->num ? 1.0 : 0.0);
    stack_push(val1);
    free_value(val2);
}

void numbers_greater_or_equal() {
    GlassValue *val1 = stack_pop();
    GlassValue *val2 = stack_pop();
    val1->num = (val1->num <= val2->num ? 1.0 : 0.0);
    stack_push(val1);
    free_value(val2);
}

void numbers_less_than() {
    GlassValue *val1 = stack_pop();
    GlassValue *val2 = stack_pop();
    val1->num = (val1->num > val2->num ? 1.0 : 0.0);
    stack_push(val1);
    free_value(val2);
}

void numbers_less_or_equal() {
    GlassValue *val1 = stack_pop();
    GlassValue *val2 = stack_pop();
    val1->num = (val1->num >= val2->num ? 1.0 : 0.0);
    stack_push(val1);
    free_value(val2);
}

void unimplemented() {
    // Not implemented yet
}
