#include <assert.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef enum Type {
    TYPE_FUNC,
    TYPE_INST,
    TYPE_NAME,
    TYPE_NUMBER,
    TYPE_STRING,
} Type;

struct GlassInstance;
struct Map;

typedef struct GlassClass {
    void (*funcs[NUM_NAMES])(size_t);
} GlassClass;

typedef struct GlassInstance {
    const GlassClass *gclass;

    struct Map *vars;
} GlassInstance;

typedef struct GlassFunction {
    size_t index;

    void (*func)(size_t);
} GlassFunction;

typedef struct String {
    char *buf;

    unsigned ref_count;

    size_t alloc;

    size_t len;
} String;

void free_string(String *str) {
    str->ref_count--;
    if (str->ref_count == 0) {
        free(str->buf);
        free(str);
    }
}

typedef struct GlassValue {
    unsigned ref_count;

    Type type;

    union {
        Name name;

        size_t inst_index;

        GlassFunction func;

        String *str;

        double num;
    };
} GlassValue;

GlassValue *copy_value(GlassValue *val) {
    val->ref_count++;
    return val;
}

void free_value(GlassValue *val) {
    val->ref_count--;
    if (val->ref_count == 0) {
        switch (val->type) {
            case TYPE_STRING:
                free_string(val->str);
                break;
        }
        free(val);
    }
}

GlassValue *new_inst_value(size_t inst_index) {
    GlassValue *val = malloc(sizeof(GlassValue));
    val->ref_count = 1;
    val->type = TYPE_INST;
    val->inst_index = inst_index;
    return val;
}

typedef struct Map {
    Name *names;

    GlassValue **values;    

    size_t len;

    size_t alloc;
} Map;

#define INIT_MAP_ALLOC 8
#define MAP_INCREASE_THRESHOLD 0.5

Map *new_map() {
    Map *map = malloc(sizeof(Map));
    map->names = calloc(INIT_MAP_ALLOC, sizeof(Name));
    map->values = malloc(INIT_MAP_ALLOC * sizeof(GlassValue *));
    map->len = 0;
    map->alloc = INIT_MAP_ALLOC;
    return map;
}

void free_map(Map *map) {
    if (map != NULL) {
        for (size_t i = 0; i < map->alloc; i++) {
            if (map->names[i] != NO_NAME) {
                free_value(map->values[i]);
            }
        }
        free(map->names);
        free(map->values);
        free(map);
    }
}

void map_set(Map *map, Name name, GlassValue *value);

size_t map_get_slot(const Map *map, Name name) {
    size_t slot = name & (map->alloc - 1);
    while (map->names[slot] != NO_NAME && map->names[slot] != name) {
        slot = (slot + 1) & (map->alloc - 1);
    }
    return slot;
}

void increase_map_size(Map *map) {
    size_t old_alloc = map->alloc;
    Name *old_names = map->names;
    GlassValue **old_values = map->values;

    map->alloc = old_alloc * 2;
    map->names = calloc(map->alloc, sizeof(Name));
    map->values = malloc(map->alloc * sizeof(GlassValue *));

    for (size_t i = 0; i < map->alloc; i++) {
        if (old_names[i] != NO_NAME) {
            size_t slot = map_get_slot(map, old_names[i]);
            map->names[slot] = old_names[i];
            map->values[slot] = old_values[i];
        }
    }

    free(old_values);
    free(old_names);
}

void map_set(Map *map, Name name, GlassValue *value) {
    size_t slot = map_get_slot(map, name);
    if (map->names[slot] == name) {
        free_value(map->values[slot]);
        map->values[slot] = value;
    }
    else {
        map->names[slot] = name;
        map->values[slot] = value;
        map->len++;
        if (map->len >= map->alloc * MAP_INCREASE_THRESHOLD) {
            increase_map_size(map);
        }
    }
}

GlassValue *map_get(Map *map, Name name) {
    return map->values[map_get_slot(map, name)];
}

struct Stack {
    GlassValue **values;

    size_t len;

    size_t alloc;
} stack;

void init_stack() {
    stack.alloc = 16;
    stack.values = malloc(sizeof(GlassValue *) * stack.alloc);
    stack.len = 0;
}

void free_stack() {
    for (size_t i = 0; i < stack.len; i++) {
        free_value(stack.values[i]);
    }
}

void stack_push(GlassValue *value) {
    if (stack.len == stack.alloc) {
        stack.alloc *= 2;
        stack.values = realloc(stack.values, sizeof(GlassValue *) * stack.alloc);
    }
    stack.values[stack.len++] = value;
}

GlassValue *stack_pop() {
    assert(stack.len > 0);
    stack.len--;
    return stack.values[stack.len];
}

void duplicate(size_t index) {
    GlassValue *val = stack.values[stack.len - index - 1];
    val->ref_count++;
    stack_push(val);
}

GlassInstance *instances;

bool *insts_used;

size_t cur_inst;

size_t num_insts;

#define INIT_INSTANCES 1024

void init_instances() {
    insts_used = calloc(INIT_INSTANCES, sizeof(bool));
    instances = malloc(INIT_INSTANCES * sizeof(GlassInstance));
    num_insts = INIT_INSTANCES;
    cur_inst = 0;
}

void free_instance(GlassInstance *inst) {
    free_map(inst->vars);
}

void free_instances() {
    for (size_t i = 0; i < num_insts; i++) {
        if (insts_used[i]) {
            free_instance(&instances[i]);
        }
    }

    free(instances);
    free(insts_used);
}

void do_garbage_collection() {
    size_t new_num_insts = num_insts * 2;
    GlassInstance *new_insts = malloc(sizeof(GlassInstance) * new_num_insts);
    bool *new_insts_used = calloc(new_num_insts, sizeof(bool));

    memcpy(new_insts_used, insts_used, sizeof(bool) * num_insts);
    memcpy(new_insts, instances, sizeof(GlassInstance) * num_insts);

    free(insts_used);
    free(instances);

    insts_used = new_insts_used;
    instances = new_insts;
    num_insts = new_num_insts;
    cur_inst = 0;
}

size_t new_instance(const GlassClass *gclass) {
    while (cur_inst < num_insts) {
        if (!insts_used[cur_inst]) {
            insts_used[cur_inst] = true;
            instances[cur_inst].gclass = gclass;
            instances[cur_inst].vars = new_map();
            return cur_inst++;
        }
        cur_inst++;
    }
    do_garbage_collection();
    return new_instance(gclass);
}

Map *globals;

void init_globals() {
    globals = new_map();
}

void free_globals() {
    free_map(globals);
}

void set_var(Name name, GlassValue *value, Map *locals, size_t inst_index) {
    NameScope scope = get_name_scope(name);

    if (scope == SCOPE_LOCAL) {
        map_set(locals, name, value);
    }
    else if (scope == SCOPE_GLOBAL) {
        map_set(globals, name, value);
    }
    else {
        GlassInstance *instance = &instances[inst_index];
        map_set(instance->vars, name, value);
    }
}

GlassValue *get_var(Name name, Map *locals, size_t inst_index) {
    NameScope scope = get_name_scope(name);

    if (scope == SCOPE_LOCAL) {
        return map_get(locals, name);
    }
    else if (scope == SCOPE_GLOBAL) {
        return map_get(globals, name);
    }
    else {
        GlassInstance *instance = &instances[inst_index];
        return map_get(instance->vars, name);
    }
}

GlassValue *make_func(size_t inst_index, Name func_name) {
    GlassValue *value = malloc(sizeof(GlassValue));
    value->ref_count = 1;
    value->type = TYPE_FUNC;
    value->func.index = inst_index;
    value->func.func = instances[inst_index].gclass->funcs[func_name];
    return value;
}

bool is_truthy(const GlassValue *value) {
    switch (value->type) {
        case TYPE_STRING: return value->str->len > 0;
        case TYPE_NUMBER: return value->num != 0.0;
        default: return false;
    }
}
